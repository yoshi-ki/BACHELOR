(define a 100)
この時点でaに100が代入され、これをフレーム(0)とする。
(define h (lambda (x) (lambda (y) (+ x (* a y)))))
フレーム(0)にhがλ閉包として保存される。
ここで、λ閉包の中には、定義時の環境、すなわち、a->100が保存されている。
関数適用の評価時には、この環境がλ閉包から取り出されて、拡張されて用いられる。
(let ((a 0))
ここで、新しいフレームが作成される。これをフレーム(1)とする。
このフレームでは、a->0である。
  ((h 1) (+ a 5)))
まず、(h 1)の部分を評価する。すると、hがλ閉包であるとわかる。
次に、関数適用が起こり、λ閉包の中から環境が取り出されて、パラメーターのための拡張が行われる、
すなわち、λ閉包時の環境、a->100に対して、新しいフレームが作られ、x->1となる。
そして、この環境で、(lambda (y) (+ x (* a y)))が評価される。
ここでまた新しくλ閉包が作られるので、a->100, x->1がλ閉包に含まれることになる。
この時点で、(h 1)の部分の評価が完了している。
  ((h 1) (+ a 5)))
そして、上記式の残りの部分の評価に入る。
(+ a 5)は、letでの局所的な処理の中なので、aには、フレーム(1)の値が代入され、(+ a 5)は5となる。
その後、関数適用が怒るので、先ほどのλ閉包から、環境が取り出されて使われる。
先ほどのλ閉包から取り出される環境とは、
a->100, x->1である。
パラメータのための拡張が行われ、
y->5が加わる。
(+ x (* a y))がこの環境で評価されるので、
この値は501となる。
そして、その後の)で、let式で作ったフレーム(1)が消える。
