浮動小数点数で、1.0より大きい最小の正の数を求める。
浮動小数点数のビットパターンのLSB側から9桁は、指数部分と符号に値する。
ここで、正の数を求めるので、LSBは、0である。
また、1.0より少しだけ大きくするには、指数部分はいじらずに仮数部分をいじる方が良いのは明らかである。
それは、指数部分による変化の方が、仮数部分のによる変化より大きいからである。
よってLSBの後の8桁は1.0と同じにするべきである。
また、仮数部分に関しては、LSBがもっとも変化の少ないビットなので、その部分のみを変化させれば、1.0より大きい最小の正の数を求められる。
ここで、1.0の時の仮数部分は全て0であることに注意すれば、
求めたい数のビット列は
0(符号)
01111111(指数部分)
00000000000000000000001(仮数部分、22個の0と1個の1)
となる。
これを計算すると、
1.0000001192092896となる。
よって、1.0より大きい最小の正の数は1.0000001192092896である。
ビットパターンは
00111111100000000000000000000001


最小の正の数についても上の議論の1.0の部分を0に変えて行う。
符号部分は0
指数部分は0と同じ00000000である。
そして、仮数部分のLSBを1変える。
すると、
0(符号)
00000000(指数部分)
00000000000000000000001(仮数部分、22個の0と1個の1)
となる。
これを計算すると、
7.006492321624085e-46となる。
ビットパターンは
00000000000000000000000000000001
