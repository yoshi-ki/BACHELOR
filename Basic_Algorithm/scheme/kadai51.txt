(define (exp1 a n)
  (cond ((< n 0) 0)
        ((= n 0) 1)
        ((even? n) (* (exp1 a (/ n 2)) (exp1 a (/ n 2))))
        (else (* a (exp1 a (- n 1))))))

(define (exp2 a n)
  (let ((square (lambda (x) (* x x))))
    (cond ((< n 0) 0)
          ((= n 0) 1)
          ((even? n) (square (exp2 a (/ n 2))))
          (else (* a (exp2 a (- n 1)))))))

としてそれぞれの関数を定義すると、
(exp1 1 (exp1 2 60))は遅く、
(exp2 1 (exp2 2 60))は早い。

これは、exp1の場合、(* (exp1 a (/ n 2)) (exp1 a (/ n 2)))を用いているのに対し、
exp2の場合、その動作を((square (lambda (x) (* x x))))で代替していることにある。

schemeが、関数適用で関数の中身に入るより先に引数部分の評価が行われる、値呼びであることに注意すれば、
(* (exp1 a (/ n 2)) (exp1 a (/ n 2)))と((square (lambda (x) (* x x))))
では、exp関数を呼び出している回数が違う。
exp1では、exp1を二回呼び出すのに対し、
squareを用いている場合、exp2の計算が一回行われて、そのあとにそこで出た値を用いて計算しているのでexp2の呼び出しは一回ということである。
全体で概算すると、
exp1が2^N回呼び出している間に、exp2がN回呼び出している。
それによって実行時間に大きな差が出ている。
