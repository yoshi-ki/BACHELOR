diff -Nru linux_original/arch/x86/entry/syscalls/syscall_64.tbl linux/arch/x86/entry/syscalls/syscall_64.tbl
--- linux_original/arch/x86/entry/syscalls/syscall_64.tbl	2019-05-31 22:47:36.000000000 +0900
+++ linux/arch/x86/entry/syscalls/syscall_64.tbl	2019-06-10 15:29:49.362850000 +0900
@@ -339,7 +339,7 @@
 330	common	pkey_alloc		sys_pkey_alloc
 331	common	pkey_free		sys_pkey_free
 332	common	statx			sys_statx
-
+333 common  flip			sys_flip
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation.
diff -Nru linux_original/include/linux/syscalls.h linux/include/linux/syscalls.h
--- linux_original/include/linux/syscalls.h	2019-05-31 22:47:36.000000000 +0900
+++ linux/include/linux/syscalls.h	2019-06-10 16:08:16.970796000 +0900
@@ -940,5 +940,5 @@
 asmlinkage long sys_pkey_free(int pkey);
 asmlinkage long sys_statx(int dfd, const char __user *path, unsigned flags,
 			  unsigned mask, struct statx __user *buffer);
-
+asmlinkage long sys_flip(char __user *p, int len);
 #endif
バイナリーファイル linux_original/kernel/.flip.c.swp とlinux/kernel/.flip.c.swp は異なります
diff -Nru linux_original/kernel/Makefile linux/kernel/Makefile
--- linux_original/kernel/Makefile	2019-05-31 22:47:36.000000000 +0900
+++ linux/kernel/Makefile	2019-06-10 14:46:54.312001000 +0900
@@ -4,7 +4,7 @@
 #
 
 obj-y     = fork.o exec_domain.o panic.o \
-	    cpu.o exit.o softirq.o resource.o \
+	    flip.o cpu.o exit.o softirq.o resource.o \
 	    sysctl.o sysctl_binary.o capability.o ptrace.o user.o \
 	    signal.o sys.o umh.o workqueue.o pid.o task_work.o \
 	    extable.o params.o \
diff -Nru linux_original/kernel/flip.c linux/kernel/flip.c
--- linux_original/kernel/flip.c	1970-01-01 09:00:00.000000000 +0900
+++ linux/kernel/flip.c	2019-06-10 16:34:57.487500000 +0900
@@ -0,0 +1,40 @@
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/aio_abi.h>
+#include <linux/capability.h>
+#include <linux/signal.h>
+#include <linux/list.h>
+#include <linux/bug.h>
+#include <linux/sem.h>
+#include <asm/siginfo.h>
+#include <linux/unistd.h>
+#include <linux/quota.h>
+#include <linux/key.h>
+#include <trace/syscall.h>
+#include <linux/syscalls.h>
+#include <linux/slab.h>
+
+SYSCALL_DEFINE2(flip, char __user *, p, int, len)
+{
+	char *a;
+	char *b;
+	int i = 0;
+	a = kmalloc(len, GFP_KERNEL);
+	copy_from_user(a,p,len);
+    b = kmalloc(len, GFP_KERNEL);
+    copy_from_user(b,p,len);
+
+	//ここでreverseする
+	while(i < len){	
+		b[i] = a[len-i-1];
+		i++;
+	}
+
+	copy_to_user(p,b,len);
+	kfree(a);
+	kfree(b);
+
+	return len;
+}
+
+
