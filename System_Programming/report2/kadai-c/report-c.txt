measure1(readを使った場合)について
バッファサイズを1にした場合：0.638800306sec
バッファサイズを8192にした場合：0.001700077sec
となった

measure2(freadを使った場合)について
バッファサイズを1にした場合 : 0.019733922sec
バッファサイズを8192にした場合 : 0.001933187sec 
となった

まず、バッファサイズが8192の場合について比較する。
バッファサイズが8192の場合、measure1の方がmeasure2より早くなった。これは、fread,fwriteの方が無駄なシステムコールを呼び出しているからだと考えられる。その根拠としてstraceの結果を以下に示す。

measure1の場合
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
  0.00    0.000000           0        64           read
  0.00    0.000000           0        63           write
  0.00    0.000000           0         4           close
  0.00    0.000000           0         3           fstat
  0.00    0.000000           0         5           mmap
  0.00    0.000000           0         4           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         3           brk
  0.00    0.000000           0         3         3 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
  0.00    0.000000           0         4           openat
------ ----------- ----------- --------- --------- ----------------
100.00    0.000000                   156         3 total

measure2の場合
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 57.72    0.000991           8       123           write
 19.28    0.000331           5        65           read
  5.01    0.000086          22         4           openat
  4.31    0.000074          15         5           mmap
  2.85    0.000049          49         1           execve
  2.62    0.000045          11         4           mprotect
  2.27    0.000039          13         3         3 access
  1.81    0.000031           6         5           fstat
  1.46    0.000025           6         4           close
  1.34    0.000023          23         1           munmap
  0.87    0.000015           5         3           brk
  0.47    0.000008           8         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.001717                   219         3 total

このように、writeを呼び出している回数が違う。measure1で一回行っているのにつき、約二回行っていることがわかる。
これが原因となって遅くなっている。



次に、バッファサイズが1の場合について考察する。
この場合は、measure2の方があきらかに早かった。
これは、freadの方がreadしている回数が少ないからである。freadは一文字ずつよみこんでいても、実際にシステムコールを呼び出している回数はその呼んだ回数より少ない。なぜなら、一度のreadで一文字以上を先に読み込んでいるからである。
以下がシステムコールの呼び出し回数である。

measure1の場合
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 57.30    1.772315           4    500001           write
 42.70    1.320816           3    500002           read
  0.00    0.000096          24         4           openat
  0.00    0.000011           3         4           close
  0.00    0.000007           2         3           brk
  0.00    0.000003           1         3           fstat
  0.00    0.000000           0         5           mmap
  0.00    0.000000           0         4           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         3         3 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    3.093248               1000032         3 total


measure2の場合
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 60.97    0.000314           3       124           write
 39.03    0.000201           2       125           read
  0.00    0.000000           0         4           close
  0.00    0.000000           0         5           fstat
  0.00    0.000000           0         5           mmap
  0.00    0.000000           0         4           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         3           brk
  0.00    0.000000           0         3         3 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
  0.00    0.000000           0         4           openat
------ ----------- ----------- --------- --------- ----------------
100.00    0.000515                   280         3 total


呼び出し回数がmeasure2の方が少ないことが確認できた。
もう一つ確認すべきことがあり、それは余分に読み取らないようにfreadを設定すればよい
setvbuf(fp1,NULL,_IONBF,0);
setvbuf(fp2,NULL,_IONBF,0);
これをおこなった後、straceして、システムコールを呼び出している回数を調べればよい。
結果は以下のようになった。
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 57.12    1.583798           3    500001           write
 42.88    1.189090           2    500002           read
  0.00    0.000092          23         4           close
  0.00    0.000003           1         3           fstat
  0.00    0.000000           0         5           mmap
  0.00    0.000000           0         4           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         3           brk
  0.00    0.000000           0         3         3 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
  0.00    0.000000           0         4           openat
------ ----------- ----------- --------- --------- ----------------
100.00    2.772983               1000032         3 total

よって、freadが余分に読み込んで、システムコールを呼び出すか位数を減らす工夫がされていたことがわかった。
